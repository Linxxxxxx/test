前情回顾

1 进程对象 p
p.name  进程名
p.pid   新进程的PID
p.is_alive()  查看进程状态
p.daemon  

2 自定义进程类
继承Process   重写run

3 进程池   避免大量进程频繁的创建删除
           Pool() 创建进程池
       apply_async()  添加时间
       close()  关闭进程池
       join()  回收进程池
       map()
4. 进程间通信
   管道 --》 Pipe（）
   消息队列 --》 Queue（） ---》 q
                q.put   q.get  q.full  q.empty
        q.qsize  q.close
   共享内存 --》 Value   Array

***************************************************

信号 

一个进程向另外一个进程通过信号的方式传递某种讯息。接收方在接收到信号后作出相应的处理。

kill  -l   查看信号
kill  -sig   PID   向一个进程发送信号 

关于信号

信号名称 ： 系统定义，名字或者数字
信号含义 ： 系统定义，信号的作用
默认处理方法 ：当一个进程接收到信号是，默认产生的效果
               终止进程    暂停进程    忽略发生
          
E.G.  
SIGHUP   断开连接
SIGINT   ctrl-c
SIGQUIT  ctrl-\
SIGTSTP  ctrl-z
SIGKILL  终止进程且不能被处理
SIGSTOP  暂停进程且不能被处理
SIGALRM  时钟信号
SIGCHLD  子进程状态改变发送给父进程信息号

python信号处理

os.kill(pid,sig)
功能 ： 发送一个信号给某个进程
参数 ： pid  给哪个进程发送信号
        sig  要发送什么信号


signal.alarm(sec)
功能: 设置时钟信号  在一定时间后给自身发送SIGALRM信号
参数： sec  时间（秒）

* 一个进程中只能有一个时钟，后来的时候会覆盖前面的时间

程序的同步执行和异步执行
同步 ： 程序按照步骤一步一步执行，呈现一个先后性和顺序性
异步 ： 程序在执行中利用内核功能帮助完成必要的辅助操作，不影响应用层持续执行

signal.pause()
功能： 阻塞进程，等待一个信号

signal.signal(sig,handler)
功能 ： 处理信号
参数 ： sig  要处理的信号
        handler  信号处理方法
       可选值 ： SIG_DFL  表示使用默认方法处理
                 SIG_IGN  表示忽略这个信号
             func   自定义函数
           自定义函数格式 ： def func(sig,frame)
                 sig : 接收到的信号
                 frame： 信号结构对象

* signal函数也是一个异步处理函数。只要执行了该函数，则进程任意时候接收到相应信号都会处理。
* signal 是不能处理 SIGKILL SIGSTOP的
* 父进程中可以用 signal(SIGCHLD,SIG_IGN)将子进程的退出交给系统处理
* 信号是一种异步的进程间通信方法


信号量

给定一定的数量，对多个进程可见，并且多个进程根据信号量多少确定不同的行为

sem = Semaphore(num)
功能 ： 创建信号量对象
参数 ： 信号量的初始值
返回 ： 信号量对象

sem.acquire()  将信号量数量减1   当数量为0则阻塞
sem.release()  将信号量数量加1 
sem.get_value()  获取当前信号量的值 


同步互斥机制

目的 ： 解决对共有资源产生的资源争夺

临界资源 ： 多个进程或者线程都能够操作的资源
临界区 ： 操作临界资源的代码段

同步 ： 同步是一种合作关系，为完成某个任务，多进程或者多线程之间形成一种协调，按照约定执行，相互告知，共同完成任务。

互斥 ： 互斥是一种制约关系，当一个进程或者线程进入临界区操作资源时采用上锁的方式，阻止其他进程操作。直到解锁后才会让出资源


Event 事件

from multiprocessing import  Event

创建事件对象
e = Event()

事件阻塞
e.wait([timeout])
功能 ： 使进程处于阻塞状态，直到事件对象被set

事件设置
e.set()
功能 : 让事件对象变为被设置状态

清除设置
e.clear()
功能 ： 使事件对象清除设置状态

事件判断 判断当前事件对象的状态
e.is_set() 



锁  Lock

multiprocessing --》 Lock

创建对象
lock = Lock()

lock.acquire()  上锁 
lock.release()  解锁

* 如果一个锁对象已经被上锁则再调用acquire会阻塞


with lock:上锁
    ...
    ...
    解锁

线程
    什么是线程
        线程也是一种多任务编程方法,可以利用计算机多核资源完成程序的并发执行,线程又被称为轻量级的进程
    线程特征
        线程是计算机多核分配的最小单位
        一个进程可以包含多个线程
        线程也是一个运行的过程,消耗计算机资源,多个线程共享进程的资源和空间
        线程的创建删除消耗的资源都要远远小于进程
        多个线程之间执行互不干扰
        线程也有自己的特有属性,比如指令集 ID
    threading 模块创建线程
        threading.Thread()
            功能
                创建线程对象
            参数
                name 线程名称 默认 Thread-1
                target 线程函数
                args 元组 给线程函数位置传参
                keargs 字典 给线程函数键值传参
        t.start()
            启动线程 自动运行线程函数
        t.join([timeout])
            回收线程

    线程对象属性
        t.is_alive()
            查看线程状态
        t.name
            线程名称
        t.setName()
            设置线程名称
        t.getName()
            获取线程名称
        threading.currentThread()
            获取当前线程对象
        t.daemon
            默认情况下主线程退出不会影响分支线程执行
            如果设置为True 则分支线程随主线程退出
            设置方法
                t.daemon = True
                t.setDaemon(True)
            判断属性值
                t.isDaemon()
            要在start前设置,不会和join同用

    创建自己的线程类
        步骤
            继承Thread
            加载Thread中的__init__

    线程通信
        通信方法
            多个线程共享进程的空间,所以线程间通信使用全局变量完成
        注意事项
            线程间使用全局变量往往要同步互斥机制保证通信安全

    线程同步互斥方法

    线程的event
        e = threading.Event()
            创建事件对象
        e.wait([timeout])
            如果e为设置状态则不阻塞否则阻塞
        e.set()
            将e变为设置状态
        e.clear()
            清楚设置

    线程锁
        lock = threading.Lock()
            创建锁对象
        lock.acquire()
            上锁
        lock.release()
            解锁
        也可以通过with上锁,上锁状态调用acquire会阻塞

    python线程的GIL问题 (全局解释器锁)
        python --> 支持多线程 --> 同步互斥 --> 加锁 --> 超级锁,给解释器加锁 --> 解释器同一时刻只能解释一个线程
        后果
            一个解释器同一时刻只能解释执行一个线程,所以导致python线程效率低下.但是当遇到IO阻塞时线程会主动让出解释器,因此python线程更加适合高延迟的IO程序并发
        python 多线程只用在IO密集型时能发挥作用

        解决方法
            尽量用进程完成并发
            不使用c解释器
            尽量使用多种方案组合的方式进行并发操作,线程用作高延迟IO

              cpu密集型  IO密集型
        单线程   20.9       5
        多线程   21.4      4.6
        多进程   11.6      2.7

作业
    总结进程线程差异
    复习网络编程基本内容
    司机和售票员的故事
        创建父子进程分别代表司机和售票员
        当售票员收到SIGINT信号,给司机发送SIGUSR1信号,此时司机打印'老司机开车了'
        当售票员收到SIGQUIT信号,给司机发送SIGUSR2信号,此时司机打印'车速有点快,系好安全带'
        当司机捕捉到SIGTSTP信号,给售票员发送SIGUSR1,售票员打印'到站了,请下车'
        到站后 售票员先下车, 司机下车
        说明
            SIGINT SIGQUIT SIGTSTP 从键盘发出
            
